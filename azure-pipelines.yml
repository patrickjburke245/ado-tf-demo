# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

parameters:
  - name: tf_version
    type: string
  - name: working_directory
    type: string
  - name: environment
    type: string

stages:
  - stage: release_${{ parameters.environment }}
    displayName: Release to ${{ parameters.environment }}
    variables:
      - group: root-terraform-backend-credentials
      - name: backend_tfvars
        value: "/tf/backend/backend.ci.tfvars"
      - name: variable_tfvars
        value:  "/tf/environments/${{ parameters.environment }}/variables.tfvars"
      - name: infrastructure_workingdirectory
        value:  "$(Build.Repository.LocalPath)"
    jobs:
    - job:
      steps:
        - task: TerraformInstaller@0
          displayName: "Use Terraform ${{ parameters.tf_version }}"
          inputs:
            terraformVersion: ${{ parameters.tf_version }}
        
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: "Replace tokens in backend.tfvars with variables from the CI/CD environment vars"
          inputs:
            targetFiles: $(backend_tfvars)
            encoding: "auto"
            writeBOM: true
            actionOnMissing: "fail"
            keepToken: false
            tokenPrefix: "#{"
            tokenSuffix: "}#"

        - bash: |
            terraform init -backend-config=$(backend_tfvars) -input=false
          env:
            ARM_CLIENT_ID: $(sp_clientId)
            ARM_CLIENT_SECRET: $(sp_clientSecret)
            ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
            ARM_TENANT_ID: $(sp_tenantId)
          displayName: Initialize configuration
          workingDirectory: $(infrastructure_workingdirectory)
          failOnStderr: true

        - bash: |
            terraform plan -var-file=$(variable_tfvars) -input=false -out=tfplan
          env:
            ARM_CLIENT_ID: $(sp_clientId)
            ARM_CLIENT_SECRET: $(sp_clientSecret)
            ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
            ARM_TENANT_ID: $(sp_tenantId)
          displayName: Create execution plan
          workingDirectory: $(infrastructure_workingdirectory)
          failOnStderr: true

        - bash: 
            terraform apply -input=false -auto-approve tfplan && terraform output -json > output.${{ parameters.environment }}.json
          env:
            ARM_CLIENT_ID: $(sp_clientId)
            ARM_CLIENT_SECRET: $(sp_clientSecret)
            ARM_SUBSCRIPTION_ID: $(sp_subscriptionId)
            ARM_TENANT_ID: $(sp_tenantId)
          displayName: Apply execution plan
          workingDirectory: $(infrastructure_workingdirectory)
          failOnStderr: true
